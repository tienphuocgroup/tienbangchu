# Multi-stage build for minimal production image
FROM golang:1.24.3-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies (cached layer)
RUN go mod download

# Copy source code
COPY . .

# Build the turbo service with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o turbo-service \
    cmd/turbo/main.go

# Final stage: minimal runtime image
FROM scratch

# Copy timezone data and CA certificates
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the binary
COPY --from=builder /app/turbo-service /turbo-service

# Set timezone
ENV TZ=UTC

# Optimize for performance
ENV GOGC=off
ENV GOMAXPROCS=0
ENV DISABLE_GC=true

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=5s --timeout=1s --start-period=2s --retries=3 \
    CMD ["/turbo-service", "--health-check"]

# Run the service
ENTRYPOINT ["/turbo-service"]